<pre class='metadata'>
Title: Locale Extensions
Shortname: locale-extensions
Level: 1
Status: CG-DRAFT
Group: WICG
Repository: ben-allen/locale-extensions
URL: https://github.com/ben-allen/locale-extensions
Editor: Ben Allen, Igalia https://igalia.com, benallen@igalia.com
!Tests: 
Abstract: This specification introduces a Client Hints header and a homologous JavaScript API that will allow the use of a subset of Unicode Extensions for BCP 47 to tailor content. This will allow web platform developers to improve the accessibility and usability of web applications.
Markup Shorthands: markdown yes

</pre>

<pre class=biblio>

{
  "CLIENT-HINTS": {
    "authors": ["Ilya Grigorik", "Yoav Weiss"],
    "href": "https://datatracker.ietf.org/doc/rfc8942/",
    "title": "HTTP Client Hints",
    "status": "RFC - Experimental (February 2021; No errata)",
    "publisher": "IETF httpbis-WG"
  },
  "draft-ietf-httpbis-header-structure-19": {
    "authors": ["Mark Nottingham", "Poul-Henning Kamp"],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure-19",
    "title": "Structured Field Values for HTTP",
    "status": "ID",
    "publisher": "IETF httpbis-WG"
  },
  "draft-davidben-http-client-hint-reliability-02": {
    "authors": ["David Benjamin"],
    "href": "https://tools.ietf.org/html/draft-davidben-http-client-hint-reliability-02",
    "title": "Client Hint Reliability",
    "status": "ID",
    "publisher": "IETF httpbis-WG"
  }
}


</pre>

<pre class="anchors">

urlPrefix: https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-header-structure; spec: draft-ietf-httpbis-header-structure
    type: dfn
        text: structured header
urlPrefix: https://cldr.unicode.org/index/bcp47-extension; spec: bcp47-extension
    type: dfn
        text: Unicode Extensions for BCP 47
        text: HTTP Client Hint
urlPrefix: https://github.com/tc39/ecma402/issues/416#issue-574957588
    type: dfn
        text: common user preferences 
urlPrefix: https://tools.ietf.org/html/draft-davidben-http-client-hint-reliability-02
    type: dfn
        text:Security Considerations of Client Hint Reliability; url: #section-5

</pre>


Introduction {#introduction}
=====

Operating systems allow custom overrides to locale-specific settings. Failing to respect certain of these settings can result in reduced accessibility, and in some cases may result in the generation of content that is unintelligible to users. Examples in increasing level of importance include:

Unicode Extension for BCP 47 can be used to append additional information needed to identify locales to the end of language identifiers. We propose adding support for a limited subset of these extensions in order to help solve common problems like the ones below:

>Currently en-US is the typical untranslated language for software, even though en-US's region-specific formatting patterns differ from those used globally. As a result, often text with untranslated UI strings will be displayed in a language accessible to all users who speak English, but with temperatures represented in Fahrenheit, a scale which is confusing and unfamiliar to users from regions that use Celcius, and with time represented in a non-preferred 12 hour hour cycle. 

>In many regions both Latin and Arabic-Indic numerals are in common use. Users in these regions may find one or the other of these numbering systems unintelligible, and desire content tailored to the numbering system they use. 

For **client-side applications**, the best way to get these preferences is through a browser API that fetches this information from the different platform-specific APIs. 

For **server-side applications**, one way to access this information is through the use of a [[!CLIENT-HINTS]] header on the request signalling that Unicode Extensions are to be used.  


Locale Extension Features {#locale-extensions-features}
====================

We propose to address the above uses cases by using a [[!CLIENT-HINTS]] header and a homologous [[#javascript-api]]. Both will be responsible for exposing and negotiating the exchange of desired tailorings. We define a new standard <dfn export>`Locale-Extensions`</dfn> Client Hint and <dfn for='NavigatorLocaleExtensions' export>`navigator.localeExtensions`</dfn>, mapping locale settings using the following steps: 

1. Validate that specific locale extensions are allowed to be exposed.
2. Read the available OS tailorings
3. Return values for those exposed locale extensions.

## Client Hints ## {#locale-extensions-client-hints}

An [=HTTP Client Hint=] is a request header field that is used by HTTP clients to indicate preferred content tailorings. The Client Hints infrastructure defines an `Accept-CH` response header that servers can use to advertise their use of specific request headers for proactive content negotiation. This opt-in mechanism enables clients to send content adaptation data selectively, instead of appending all such data to every outgoing request. 

Because servers must specify the set of headers they are interested in receiving, the Client Hint mechanism eliminates many of the opportunities for hostile passive fingerprinting that arise when using other means for proactive content negotiation (for example, the User-Agent string). See the [privacy and security section below] for more details.

### Common User Preferences ### {#common-user-preferences} 
The following table suggests a minimal set of commonly used locale extensions to be supported. Observe that the list of supported possible values for each extension is exhaustive.
<table>
  <tr><td>"hourCycle"<td>`hc`<td>`h12`, `h23`, `default`<td>12-hour or 24-hour hour cycle</tr>
  <tr><td>"numberingSystem"<td>`nu`<td>`latn`, `native`, `default`<td>Preferred numbering system</tr>
  <tr><td>"measurementUnit"<td>`mu`<td>`celcius`, `fahrenheit`, `default`<td>Measurement unit for temperature</tr>
  <thead><tr><th>Locale Extension Name<th>Unicode Extension Key<th>Possible values<th>Description</thead>
</table>

Limiting the range of options to a few sensible values helps mitigate privacy and security concerns related to providing servers with preferred content tailorings. Most notably, restricting the range of available numbering systems to `latn`, `native`, and `default` allows content tailoring , such as `ta`, which have a `default` value other than `latn` and a separate `native` value differing from both `latn` and `default`. This allows servers to provide content tailored to three different 

> Note: The full set of extensions ultimately included need to be validated and agreed to by security teams and stakeholders.

### `Client Hint` Header fields ### {#client-hint-header-fields}

Servers cannot passively receive information about locale extension-related settings. Servers instead advertise their ability to use extensions, allowing clients the option to respond with preferred content tailorings. 

To accomplish this, browsers should introduce new `Client Hint` header fields as part of a [=structured header=] as defined in [[!draft-ietf-httpbis-header-structure-19]]:

<table>
  <tr><td><dfn export>`Sec-CH-Locale-Extensions-Hour-Cycle`</dfn><td>`Sec-CH-Locale-Extensions-Hour-Cycle`  : "h24"</tr>
  <tr><td><dfn export>`Sec-CH-Locale-ExtensionsNumbering-System`</dfn><td>`Sec-CH-Locale-Extensions-NumberingSystem`  : "native"</tr>
  <tr><td><dfn export>`Sec-CH-Locale-Extensions-MeasurementUnit`</dfn><td>`Sec-CH-Locale-Extensions-MeasurementUnit` : "auto"</tr>

  <thead><tr><th style=text:align left>Client Hint<th>Example output</thead>
</table>

### Usage example ### {#locale-extensions-example} 

<div class=example>

1. The client makes an initial request to the server:

```http
GET / HTTP/1.1
Host: example.com
```

2. The server responds, telling the client via an `Accept-CH` header (Section 2.2.1 of [[!RFC8942]]) along with the initial response with `Sec-CH-Locale-Extensions-NumberingSystem`, indicating that the server accepts that particular Client Hint and no others.

```http
HTTP/1.1 200 OK
Content-Type: text/html
Accept-CH: Sec-CH-Locale-Extensions-NumberingSystem
```

3. Subsequent requests to https://example.com will include the following request headers in case `numberingSystem` is "native":

```http
GET / HTTP/1.1
Host: example.com
Sec-CH-Locale-Extensions-NumberingSystem: "native" 
```

4. The server can then tailor the response accordingly. For example, if the current locale is 'hi-IN', the server could generate content with numbers represented in Devanagari numerals.

</div>

## JavaScript API ## {#javascript-api}

These client hints should also be exposed as JavaScript APIs via `navigator.locales`, or by creating a new `navigator.localeExtensions` information as below:

### IDL ### {#locale-extensions-javascript-idl} 


```
dictionary LocaleExtensions {
  DOMString measurementUnit;
  DOMString numberingSystem;
  DOMString hourCycle;
};


interface mixin NavigatorLocaleExtensions {
  readonly attribute LocaleExtensions localeExtensions;
};

Navigator includes NavigatorLocaleExtensions;
WorkerNavigator includes NavigatorLocaleExtensions;
```


### Proposed Syntax ### {#user-locale-extensions-javascript-api-proposed-syntax}
<div class=example>
```js

navigator.localeExtensions['numberingSystem'];
navigator.localeExtensions.numberingSystem;
self.navigator.localePreferences.languageRegion;
// Output => => {numberingSystem: "latn"}

navigator.localeExtensions['measurementUnit'];
navigator.localeExtensions.measurementUnit;
self.navigator.localePreferences.measurementUnit;
// Output => => {measurementUnit: "celcius"}

navigator.localeExtensions['hourCycle'];
navigator.localeExtensions.hourCycle;
self.navigator.localePreferences.hourCycle;
// Output => => {measurementUnit: "h12"}

// Window or WorkerGlobalScope event

window.onlocaleextensions = (event) => {
  console.log('localeextensions event detected!');
};

// Or

window.addEventListener('localeextensions', () => {
  console.log('localeextensions event detected!');
});

```

</div>

Privacy and Security Considerations {#privacy-and-security-considerations} 
=====================

Client Hints provides a powerful content negotiation mechanism that enables us to adapt content to users' needs without compromising their privacy. It does this by requireing server opt-in, which guarantees that access to the information requires active and tracable action on the server's side. As such, the mechanism does not increase the web's current passive fingerprinting surface, while removing the need to use other means (for example, User-Agent strings) which may themselves provide passive fingerprinting surfaces. 

The use of the `Sec-CH-` prefix is to forbid access to headers containing `Locale Extensions` information from JavaScript, and to demarcate them as browser-controlled client hints so that they can be documented and included in requests without triggering CORS preflights. 

The Security Considerations of [[!CLIENT-HINTS]] and [[!draft-davidben-http-client-hint-reliability-02]] likewise apply to this proposal.
