<pre class='metadata'>
Title: Locale Extensions
Shortname: locale-extensions
Level: 1
Status: CG-DRAFT
Group: WICG
Repository: ben-allen/locale-extensions
URL: https://github.com/ben-allen/locale-extensions
Editor: Ben Allen, Igalia https://igalia.com, benallen@igalia.com
!Tests: 
Abstract: This specification introduces a Client Hints header and a homologous JavaScript API that will allow a reliable way to use Unicode Extensions for BCP 47 to tailor content. This will allow web platform developers to improve the accessibility and usability of web applications.
Markup Shorthands: markdown yes

</pre>

<pre class=biblio>

{
  "CLIENT-HINTS": {
    "authors": ["Ilya Grigorik", "Yoav Weiss"],
    "href": "https://datatracker.ietf.org/doc/rfc8942/",
    "title": "HTTP Client Hints",
    "status": "RFC - Experimental (February 2021; No errata)",
    "publisher": "IETF httpbis-WG"
  },
  "draft-ietf-httpbis-header-structure-19": {
    "authors": ["Mark Nottingham", "Poul-Henning Kamp"],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure-19",
    "title": "Structured Field Values for HTTP",
    "status": "ID",
    "publisher": "IETF httpbis-WG"
  },
  "draft-davidben-http-client-hint-reliability-02": {
    "authors": ["David Benjamin"],
    "href": "https://tools.ietf.org/html/draft-davidben-http-client-hint-reliability-02",
    "title": "Client Hint Reliability",
    "status": "ID",
    "publisher": "IETF httpbis-WG"
  }
}


</pre>

<pre class="anchors">

urlPrefix: https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-header-structure; spec: draft-ietf-httpbis-header-structure
    type: dfn
        text: structured header
urlPrefix: https://cldr.unicode.org/index/bcp47-extension; spec: bcp47-extension
    type: dfn
        text: Unicode Extensions for BCP 47
        text: HTTP Client Hint
urlPrefix: https://github.com/tc39/ecma402/issues/416#issue-574957588
    type: dfn
        text: common user preferences 
urlPrefix: https://tools.ietf.org/html/draft-davidben-http-client-hint-reliability-02
    type: dfn
        text:Security Considerations of Client Hint Reliability; url: #section-5

</pre>


Introduction {#introduction}
=====

Operating systems allow custom overrides to locale-specific settings. Failing to respect certain of these settings can result in reduced accessibility, and in some cases may result in the generation of content that is unintelligible to users. Examples in increasing level of importance include:

* Hour cycle (24-hour or 12-hour time)
* Measurement unit preferences (metric or imperial, Celcius or Fahrenheit)
* Numbering system

Unicode Extensions for BCP 47 can be used to append additional information capturing these settings to the end of language identifiers. Enabling support for BCP tags can help solve cases like:

>Astrid works with a Swedish company and uses 'sv', but is most comfortable having dates and times displayed as in 'en-US'. Her OS is set to display time and measurements using these formats, and would find websites that use more accessible. 

>Developers of a NodeJS program may want to respect tailorings related to numbering system, as programs using non-preferred numbering systems may become unintellible to users. 

[[[TODO BETTER EXAMPLES]]]


For **client-side applications**, the best way to get these preferences is through a browser API that fetches this information from the different platform-specific APIs. 

For **server-side applications**, one way to access this information is through the use of a [[!CLIENT-HINTS]] header on the request signalling that Unicode Extensions are to be used.  


Locale Extension Features {#locale-extensions-features}
====================

We propose to address the above uses cases by using a [[!CLIENT-HINTS]] header and a homologous [[#javascript-api]]. Both will be responsible for exposing and negotiating the exchange of desired tailorings. We define a new standard <dfn export>`Locale-Extensions `</dfn> Client Hint and <dfn for='NavigatorLocaleExtensions' export>`navigator.localeExtensions`</dfn>, mapping locale settings using the following steps: 

1. Validate that locale extensions are allowed to be exposed.
2. Read the available OS tailorings
3. Return values. 

## Client Hints ## {#locale-extensions-client-hints}

An [=HTTP Client Hint=] is a request header field that is used by HTTP clients can be used by the server to optimize content served to those clients. The Client Hints infrastructure defines an `Accept-CH` response header that servers can use to advertise their use of specific request headers for proactive content negotiation. This opt-in mechanism enables clients to send content adaptation data selectively, instead of appending all such data to every outgoing request. 

Because servers must specify the set of headers they are interested in receiving, the Client Hint mechanism eliminates many of the opportunities for hostile passive fingerprinting that arise when using other means for proactive content negotiation (for example, the User-Agent string). 

### Common User Preferences ### {#common-user-preferences} 
The following table suggests a minimal set of commonly used locale extensions to be supported:
<table>
  <tr><td>"hourCycle"<td>`hc`<td>'h12', 'h23', 'auto'<td>12-hour or 24-hour hour cycle</tr>
  <tr><td>"numberingSystem"<td>`nu`<td>`latn`, `native`, `auto`<td>Preferred numbering system</tr>
  <tr><td>"measurementUnit"<td>`celcius`, `fahrenheit`, `auto`<td>Measurement unit for temperature</tr>

  <tr><th>Locale Extension Name<th>Unicode Extension Key<th>Possible values<th>Description
</table>

> Note: The full set of extensions ultimately included need to be validated and agreed to by security teams and stakeholders.

### `Client Hint` Header fields ### {#client-hint-header-fields}

Servers cannot passively receive information about locale extension-related settings. Servers instead advertise their ability to use extensions, allowing clients the option to respond with preferred content tailorings. 

To accomplish this, browsers should introduce new `Client Hint` header fields as part of a [=structured header=] as defined in [[!draft-ietf-httpbis-header-structure-19]]:

<table>
  <tr><td><dfn export>`Sec-CH-Locale-Extensions-Hour-Cycle`</dfn><td>`Sec-CH-Locale-Extensions-Hour-Cycle`  : "h24"</tr>
  <tr><td><dfn export>`Sec-CH-Locale-ExtensionsNumbering-System`</dfn><td>`Sec-CH-Locale-Extensions-NumberingSystem`  : "native"</tr>
  <tr><td><dfn export>`Sec-CH-Locale-Extensions-MeasurementUnit`</dfn><td>`Sec-CH-Locale-Extensions-MeasurementUnit` : "auto"</tr>

  <thead><tr><th style=text:align left>Client Hint<th>Example output</thead>
</table>

### Usage example ### {#locale-extensions-example} 

<div class=example>

1. The client makes an initial request to the server:

```http
GET / HTTP/1.1
Host: example.com
```

2. The server responds, telling the client via an `Accept-CH` header (Section 2.2.1 of [[!RFC8942]]) along with the initial response with `Sec-CH-Locale-Extensions-NumberingSystem`, indicating that the server accepts that particular Client Hint and no others.

```http
HTTP/1.1 200 OK
Content-Type: text/html
Accept-CH: Sec-CH-Locale-Extensions-NumberingSystem
```

3. Subsequent requests to https://example.com will include the following request headers in case the user sets `numberingSystem` and `timeZone` values:

```http
GET / HTTP/1.1
Host: example.com
Sec-CH-Locale-Extensions-NumberingSystem: "jpan" 
```

4. The server can then tailor the response accordingly.

</div>

## JavaScript API ## {#javascript-api}

These client hints should also be exposed as JavaScript APIs via `navigator.locales`, or by creating a new `navigator.localeExtensions` information as below:

### IDL ### {#locale-extensions-javascript-idl} 


```
dictionary LocaleExtensions {
  DOMString measurementUnit;
  DOMString numberingSystem;
  DOMString hourCycle;
};


interface mixin NavigatorLocaleExtensions {
  readonly attribute LocaleExtensions localeExtensions;
};

Navigator includes NavigatorLocaleExtensions;
WorkerNavigator includes NavigatorLocaleExtensions;
```

</pre>


### Proposed Syntax ### {#user-locale-extensions-javascript-api-proposed-syntax}
<div class=example>
```js

navigator.localeExtensions
// Output => => {measurementUnit: "fahrenhe", hourCycle: "h12", ...}

TODO: figure out what the API should actually look like.



Privacy and Security Considerations {#privacy-and-security-considerations} 
=====================

Client Hints provides a powerful content negotiation mechanism that enables us to adapt content to users' needs without compromising their privacy. It does this by requireing server opt-in, which guarantees that access to the information requires active and tracable action on the server's side. As such, the mechanism does not increase the web's current passive fingerprinting surface, while removing the need to use other means (for example, User-Agent strings) which may themselves provide passive fingerprinting surfaces. 

The use of the `Sec-CH-` prefix is to forbid access to headers containing `Locale Extensions` information from JavaScript, and to demarcate them as browser-controlled client hints so that they can be documented and included in requests without triggering CORS preflights. 

The Security Considerations of [[!CLIENT-HINTS]] and [[!draft-davidben-http-client-hint-reliability-02]] likewise apply to this proposal.
